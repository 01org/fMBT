#!/usr/bin/env python

# fMBT, free Model Based Testing tool
# Copyright (c) 2011, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.


# Example:
# gt.py new - 'P(s0,p)->T(s0,"foo",s1)T(s1,"bar",s0)P(s1,"hello")' | lsts2dot - - | dotty -


import sys
import lsts

def lsts2dot(infileobj,outfileobj,loops_as_props=False):
    outfileobj.write('digraph g {\n')
    outfileobj.write('    node [shape=box]\n')
    l=lsts.reader(infileobj)
    state2props = {int(l.get_header().initial_states): ["[initial state]"]}
    actionnames=l.get_actionnames()
    
    for propname in l.get_stateprops():
        prettyname = "[" + propname + "]"
        for state in l.get_stateprops()[propname]:
            if state in state2props:
                state2props[state].append(prettyname)
            else:
                state2props[state]=[prettyname]

    for source,outtrans in enumerate(l.get_transitions()):
        for dest,action in outtrans:
            a=actionnames[action]
            if loops_as_props and source==dest:
                if source in state2props: state2props[source].append(a)
                else: state2props[source]=[a]
            else:
                outfileobj.write('    S%s -> S%s [label="%s"]\n'
                                 % (source,dest,a))

    states = state2props.keys()
    states.sort()
    for state in states:
        props = state2props[state]
        props.sort()
        outfileobj.write('    S%s [label="%s\\l"]\n'
                         % (state,"\\l".join(props)))
    outfileobj.write('}\n')

if __name__=='__main__':
    loops_as_props=False
    
    if "--loops-as-props" in sys.argv:
        loops_as_props=True
        sys.argv.remove("--loops-as-props")

    if ("--help" in sys.argv) or (len(sys.argv) < 3):
        print "Usage: %s [options] infile outfile" % (sys.argv[0],)
        print "Options:"
        print "    --help             print this help"
        print "    --loops-as-props   print state props instead of loops"
        sys.exit(1)

    if sys.argv[1] == '-':
        infile=sys.stdin
    else:
        infile=file(sys.argv[1])
    
    if sys.argv[2] == '-':
        outfile=sys.stdout
    else:
        outfile=file(sys.argv[2],"w")

    lsts2dot(infile,outfile,loops_as_props)
    outfile.close()
