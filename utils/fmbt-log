#!/usr/bin/env python
#
# fMBT, free Model Based Testing tool
# Copyright (c) 2011-2012, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
fMBT log tool

Usage: fmbt-log [options] [logfile]

Options:
  -o, --output=<file>
          output will be written to given file. Default: the standard
          output.

  -f, --format=<fmt>
          fmt defines output format. Default format is '$ax'.
          Available fields:
          $al - adapter log messages
          $am - actions recognised by the model
          $as - action suggested to top-level adapter
          $ax - action actually executed in top-level adapter
          $mc - mapper adapter configuration
          $mn - mapper adapter number
          $ms - suggested action after renaming in mapper adapter
          $sn - number of test step
          $sc - coverage after the test step
          $st - time stamp of test step
          $tg - tags at state
          $tv - test verdict: pass or fail
          $tr - reason for the verdict
          $tt - total test runtime [s]

  -r, --raw
          do not decode actions

If logfile is not given, log is read from standard input.
"""

import sys
import getopt
import urllib2

fields = {
    '$ax' : ['<action type=', '"', 3],
    '$as' : ['<suggested_action type=', '"', 3],
    '$am' : ['<action_name name=', '"', 1],
    '$al' : ['<remote msg=', '"', 1],
    '$ms' : ['<redirect id=', '"', 5],
    '$mc' : ['<redirect id=', '"', 3],
    '$mn' : ['<redirect id=', '"', 1],
    '$sc' : ['<status steps=', '"', 3],
    '$sn' : ['<status steps=', '"', 1],
    '$st' : ['<current_time time=', '"', 1],
    '$tg' : ['<tags enabled=', '"', 1],
    '$tv' : ['<stop verdict=', '"', 1],
    '$tr' : ['<stop verdict=', '"', 3],
    '$tt' : ['<elapsed_time', '"', 1]
}

def extract(input_file_obj, output_file_obj, output_format, raw):
    # FIXME: this is just a quick to get input action names
    # printed. What this really should do is:
    # 1. parse everything that is done during a single test step
    # 2. write the stuff in requested format to output_file_obj

    def pick(line, delimiter, fieldindex):
        if raw == 1:
            contents = line.split(delimiter)[fieldindex]
        else:
            try: contents = urllib2.unquote(line.split(delimiter)[fieldindex])
            except: contents = '<syntax error>'
        return contents

    clean_data = lambda: dict([(field, []) for field in fields])

    parsed_data = clean_data()
    for lineno, line in enumerate(input_file_obj):
        for field in fields:
            match, delimiter, fieldno = fields[field]
            if match in line:
                parsed_data[field].append(pick(line, delimiter, fieldno))

        # a test step done, print values
        ppoutput = ""
        if ('<status steps=' in line) or ('</test_engine>' in line):
            printable_data = {}
            for field in parsed_data:
                printable_data[field] = '; '.join(parsed_data[field])
            ppoutput = output_format % printable_data
            parsed_data = clean_data()
        elif ((parsed_data['$al'] != [] and '%($al)' in output_format) or
              (parsed_data['$am'] != [] and '%($am)' in output_format)):
            # print immediately and only this
            printable_data = {}
            for field in parsed_data:
                if field == '$al' and parsed_data['$al']: printable_data[field] = parsed_data['$al'][0]
                elif field == '$am' and parsed_data['$am']: printable_data[field] = parsed_data['$am'][0]
                else: printable_data[field] = ''
            ppoutput = output_format % printable_data
            parsed_data['$al'] = []
            parsed_data['$am'] = []
        if ppoutput.strip(): output_file_obj.write(ppoutput)

if __name__ == '__main__':
    input_file_obj = sys.stdin
    output_file_obj = sys.stdout
    output_format = '$tv$ax'
    option_raw = 0

    opts, remainder = getopt.getopt(
        sys.argv[1:], 'hrf:o:',
        ['help', 'raw', 'format=', 'output='])
    for opt, arg in opts:
        if opt in ['-h', '--help']:
            print __doc__
            sys.exit(0)
        elif opt in ['-r', '--raw']:
            option_raw = 1
        elif opt in ['-f', '--format']:
            output_format = arg
        elif opt in ['-o', '--output'] and not arg in ['', '-']:
            output_file_obj = file(arg, 'w')

    output_format = output_format.replace('\\n', '\n').replace('\\t', '\t')
    for field in fields:
        output_format = output_format.replace(field,
                                              '%(' + field + ')s')
    output_format += '\n'

    if remainder and remainder[0] != "-":
        input_file_obj = file(remainder[0], "r")

    extract(input_file_obj, output_file_obj, output_format, option_raw)

    try: output_file_obj.close()
    except: pass
    
    try: input_file_obj.close()
    except: pass
