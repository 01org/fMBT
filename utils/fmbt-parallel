#!/usr/bin/env python
#
# fMBT, free Model Based Testing tool
# Copyright (c) 2011, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
Usage: fmbt-parallel [options] component [component...]

Options:
    -s, --sync action-regexp
        all components containing an action that matches action-regexp
        execute the action synchronously. By default nothing is
        executed synchronously. Default corresponds to the process
        algebraic operator "|||". action-regexp ".*" corresponds to
        "||", and others to "|[ list-of-matchin-actions ]|".

    -o, --output output-file
        write resulting xrules file to output-file. The default is
        standard output.
"""

import sys
import getopt
import fmbtparsers

_file2actions = {}
_current_file = None

def parsed_action(s):
    global _file2actions
    global _current_file
    if not _current_file in _file2actions:
        _file2actions[_current_file] = []
    _file2actions[_current_file].append(s)

def setup_parser():
    # Setup parser for reading only action names of lsts files and result
    # actions of xrules files

    # Define and set callback functions to be called when parsing a file
    def xrules_action_cb(s):
        parsed_action(s)

    def lts_action_cb(_, s):
        parsed_action(s)

    fmbtparsers.xrules_result_action(xrules_action_cb)
    fmbtparsers.lts_action(lts_action_cb)

if __name__ == "__main__":
    opts, remainder = getopt.getopt(
        sys.argv[1:], 'hkvf:i:o:',
        ["help", "verbose", "version", "keep-labels",
         "file=", "input=", "output="])

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print __doc__
            sys.exit(0)

    setup_parser()

    for _current_file in remainder:
        fmbtparsers.load(_current_file)
    
    print ""
    for f in _file2actions:
        print f
        for a in _file2actions[f]:
            print "    ", a

    print "done"
