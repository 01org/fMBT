#!/usr/bin/env python
#
# fMBT, free Model Based Testing tool
# Copyright (c) 2011, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
Usage: fmbt-parallel [options] component [component...]

Options:
    -s, --sync action-regexp
        all components containing an action that matches action-regexp
        execute the action synchronously. By default nothing is
        executed synchronously. Default corresponds to the process
        algebraic operator "|||". action-regexp ".*" corresponds to
        "||", and others to "|[ list-of-matchin-actions ]|".

    -o, --output output-file
        write resulting xrules file to output-file. The default is
        standard output.
"""

import sys
import os
libpath = [os.path.dirname(__file__),
           os.path.dirname(__file__) + "/../src/.libs"]

import ctypes
void_func_uint_charp = ctypes.CFUNCTYPE(None, ctypes.c_uint, ctypes.c_char_p)
void_func_charp = ctypes.CFUNCTYPE(None, ctypes.c_char_p)

for dirname in libpath:
    try: 
        l=ctypes.CDLL(dirname + os.sep + "fmbt_cparsers.so")
        break
    except: pass
else:
    print "cannot find fmbt_cparsers.so"
    sys.exit(1)

def add_file(i, s):
    print "add_file"
    print "add_file args:", i, s
add_file.c = void_func_uint_charp(add_file)

def add_result_action(s):
    print "add_result_action", s
add_result_action.c = void_func_charp(add_result_action)

def add_component(i, s):
    print "add_component", i, s
add_component.c = void_func_uint_charp(add_component)

l.xrules_add_file(add_file.c)
l.xrules_add_result_action(add_result_action.c)
l.xrules_add_component(add_component.c)

print "calling load"
l.xrules_load("/home/ask/git/fmbt/test/interactivemode/testmodel.xrules")

print "done"
