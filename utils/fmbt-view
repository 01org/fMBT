#!/usr/bin/env python

#
# fMBT, free Model Based Testing tool
# Copyright (c) 2012-2013, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
"""
Usage: fmbt-view [options] modelname.lsts

  modelname.lsts is a file containing a state machine in LSTS
  format, or \-\ for reading the lsts from standard input.

Options:
  -d      Debug (don't remove temporary files).
  -f <format>
          Default format is pdf. Other supported formats are:
          ??? execute: dot -Thelp 2>&1 | sed 's/.*://'
  -h      Print help.
  -l <logfile>
          Color states and transitions visited in the log.
  -i      Invert coloring (highlights unvisited states)
  -o <outputfile>
          Write image to outputfile, do not display it.
  -e <regexp>
          Erase transitions matching the regular expression.
  -E <regexp>
          Erase transitions matching the regular expression
          unless they have been traversed in the given log
          (see -l).
  -O      Erase orphaned states, that is, states without any
          transitions.
  -s <regexp>
          Show only transitions matching the regular expression.
  -S <regexp>
          Show only transitions that match the regular
          expression and have been traversed in the given log
          (see -l).

  -U      Erase unvisited states.
"""


import getopt
import fmbt_config
import tempfile
import os
import sys
import subprocess

if __name__ == "__main__":
    opts, remainder = getopt.getopt(
        sys.argv[1:],
        "df:hil:o:ve:E:s:S:OU",
        ["help","version"])

    OUTPUTFILE = None

    dot_command = ["dot"]
    lsts2dot_command = ["lsts2dot",
                        "--loops-in-states"]

    if len(remainder) > 0:
        lsts2dot_command.extend(["-i", remainder[0]])

    for opt, arg in opts:
        if opt in ["-h","--help"] or remainder == []:
            print __doc__
            sys.exit(0)    
        elif opt in ["-v", "--version"]:
            print "Version " + fmbt_config.fmbt_version + fmbt_config.fmbt_build_info
            sys.exit(0)
        elif opt in ["-f"]:
            dot_command.extend(["-T" + arg])
        elif opt in ["-i", "--invert-colors"]:
            lsts2dot_command.extend(["--invert-colors"])
        elif opt in ["-l"]:
            lsts2dot_command.extend(["-l", arg])
        elif opt in ["-o"]:
            dot_command.extend(["-o", arg])
            OUTPUTFILE = arg
        elif opt in ["-e"]:
            lsts2dot_command.extend(["--erase-transitions", arg])
        elif opt in ["-E"]:
            lsts2dot_command.extend(["--erase-untraversed-transitions",arg])
        elif opt in ["-s"]:
            lsts2dot_command.extend(["--show-transitions", arg]) # genius!
        elif opt in ["-S"]:
            lsts2dot_command.extend(["--show-traversed-transitions=",arg])
        elif opt in ["-O"]:
            lsts2dot_command.extend(["-O"])
        elif opt in ["-U"]:
            lsts2dot_command.extend(["-U"])

    TMPDIR = tempfile.mkdtemp(prefix="fmbt-view")
    DOTFILE=os.path.join(TMPDIR,"1.dot")
    ERRORFILE=os.path.join(TMPDIR,"1.error")

    DP=False

    if not OUTPUTFILE:
        OUTFILE=os.path.join(TMPDIR,"1.dotout")
        dot_command.extend(["-o", OUTFILE])
        DP=True

    p = subprocess.Popen(lsts2dot_command,shell=False)

    if p.wait() != 0:
        print "Error in converting state machine (lsts) into digraph (dot)"
        exit(1)

    p = subprocess.Popen(dot_command,shell=False)

    if p.wait() != 0:
        print "Error in layouting digraph with Graphviz dot."
        exit(2)

    if DP:
        p = subprocess.Popen(["display", OUTFILE])
        if p.wait() != 0:
            print "Unexpected exit from display"
