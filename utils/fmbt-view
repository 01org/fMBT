#!/bin/bash

# fMBT, free Model Based Testing tool
# Copyright (c) 2011,2012 Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

print_help_and_quit()
{
    echo "Usage: fmbt-view [options] modelname.lsts"
    echo ""
    echo "  modelname.lsts is a file containing a state machine in LSTS"
    echo "  format, or \"-\" for reading the lsts from standard input."
    echo ""
    echo "Options:"
    echo "  -d      Debug (don't remove temporary files)."
    echo "  -f <format>"
    echo "          Default format is pdf. Other supported formats are:"
    echo -n "         "; dot -Thelp 2>&1 | sed 's/.*://'
    echo "  -h      Print help."
    echo "  -l <logfile>"
    echo "          Color states and transitions visited in the log."
    echo "  -i      Invert coloring (highlights unvisited states)"
    echo "  -o <outputfile>"
    echo "          Write image to outputfile, do not display it."
    echo "  -e <regexp>"
    echo "          Erase transitions matching the regular expression."
    echo "  -E <regexp>"
    echo "          Erase transitions matching the regular expression"
    echo "          unless they have been traversed in the given log"
    echo "          (see -l)."
    exit 0
}

if [ "x$1" == "x" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    print_help_and_quit
fi

FORMAT=pdf
LOGFILE=""
OUTPUTFILE=""
COLORING=""
DISPLAY_IMAGE=1
DEBUG=0
ERASE_TRANSITIONS=""
ERASE_UNTRAVERSED=""
while getopts df:hil:o:ve:E: opt
do
    case $opt in
        d) DEBUG=1;;
        h) print_help_and_quit;;
        v) echo "Version"; exit 0;;
        f) FORMAT=$OPTARG;;
        i) COLORING="--invert-colors";;
        l) LOGFILE="-l $OPTARG";;
        o) OUTPUTFILE=$OPTARG; DISPLAY_IMAGE=0;;

        e) ERASE_TRANSITIONS=$ERASE_TRANSITIONS"--erase-transitions='$OPTARG' ";;
        E) ERASE_UNTRAVERSED=$ERASE_UNTRAVERSED"--erase-untraversed-transitions='$OPTARG' ";;
    esac
done
if [ "$OPTIND" != "$#" ]; then
    echo "Invalid arguments, try -h for help."
    exit 1;
fi
shift $(expr $OPTIND - 1)

INPUTFILE="$1"

if [ "$INPUTFILE" != "-" ] && [ ! -f "$INPUTFILE" ]; then
    echo "Invalid input file \"$INPUTFILE\"."
    exit 1
fi

if [ "$INPUTFILE" != "-" ]; then
    grep -q 'Begin Lsts' "$INPUTFILE" || {
        echo "\"$INPUTFILE\" is not an LSTS file"
        exit 1
    }
fi

UTILPATH="$(dirname "$0")"
DOTFILE=$(mktemp --tmpdir --suffix .dot fmbt-view.tmp.XXXXXXXX) || {
    echo "Can't create temporary file: $DOTFILE"
    exit 1
}
ERRORFILE=$(mktemp --tmpdir --suffix .error fmbt-view.tmp.XXXXXXXX) || {
    echo "Can't create temporary file: $ERRORFILE"
    exit 1
}

if [ "$OUTPUTFILE" == "" ]; then
    OUTPUTFILE=$(mktemp --tmpdir --suffix ."$FORMAT" fmbt-view.tmp.XXXXXXXX) || {
        echo "Can't create temporary file:""$OUTPUTFILE";
        exit 1;
    }
fi

remove_temp_files()
{
    if [ "$DEBUG" == "0" ]; then
        rm -f "$DOTFILE" "$ERRORFILE"
        if [ "$DISPLAY_IMAGE" == "1" ]; then
            rm -f "$OUTPUTFILE"
        fi
    else
        echo "Digraph without layout: $DOTFILE"
        echo "Digraph wit layout:     $OUTPUTFILE"
    fi
}

for SIGNAL in INT QUIT TERM; do
    trap "remove_temp_files; trap $SIGNAL; kill -$SIGNAL \$\$" $SIGNAL
done

LSTS2DOT_COMMAND="$UTILPATH/lsts2dot --loops-in-states -i \"$INPUTFILE\" $COLORING $ERASE_TRANSITIONS $ERASE_UNTRAVERSED $LOGFILE >$DOTFILE 2>$ERRORFILE"

if [ "$DEBUG" == "1" ]; then
    echo Run: $LSTS2DOT_COMMAND
fi

eval $LSTS2DOT_COMMAND || {
    echo "Error in converting state machine (lsts) into digraph (dot)"
    cat $ERRORFILE
    remove_temp_files
    exit 1
}

eval dot -T$FORMAT -o"$OUTPUTFILE" < $DOTFILE  >$ERRORFILE 2>&1 || {
    echo "Error in layouting digraph with Graphviz dot."
    if grep -q Segmentation $ERRORFILE; then
        echo "Possibly too many states."
    fi
    cat $ERRORFILE
    remove_temp_files
    exit 2
}

if [ "$DISPLAY_IMAGE" == "1" ]; then
    eval display "$OUTPUTFILE" >$ERRORFILE 2>&1 || {
        echo "Unexpected exit from display:"
        cat $ERRORFILE
    }
fi

remove_temp_files
