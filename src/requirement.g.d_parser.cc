/*
  Generated by Make DParser Version 1.26.4572c8430039eb8e7d05ab65767485dd85319211
  Available at http://dparser.sf.net
*/

#line 1 ".//requirement.g"

/*
 * fMBT, free Model Based Testing tool
 * Copyright (c) 2011, Intel Corporation.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU Lesser General Public License,
 * version 2.1, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */
#include <stdlib.h>
#include <string>
#include "coverage_market.hh"
typedef struct _node {
  char type;
  std::string* str;
  Coverage_Market::unit* u;
} cnode;
#define D_ParseNode_User cnode

Coverage_Market* cobj;


#line 40 "requirement.g.d_parser.cc"
#include "dparse.h"

D_Reduction d_reduction_0_requirement = {1, 0, NULL, NULL, 0, 0, 0, 0, -1, 0, NULL};
#line 34 ".//requirement.g"
int d_final_reduction_code_1_1_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  cobj->add_unit((D_PN(_children[0], _offset)->user).u);   return 0;}

#line 47 "requirement.g.d_parser.cc"
D_Reduction d_reduction_1_requirement = {1, 1, NULL, d_final_reduction_code_1_1_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 36 ".//requirement.g"
int d_final_reduction_code_2_2_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = (D_PN(_children[0], _offset)->user).u;   return 0;}

#line 52 "requirement.g.d_parser.cc"
D_Reduction d_reduction_2_requirement = {1, 2, NULL, d_final_reduction_code_2_2_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 37 ".//requirement.g"
int d_final_reduction_code_2_3_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = new Coverage_Market::unit_and ((D_PN(_children[0], _offset)->user).u,(D_PN(_children[2], _offset)->user).u);   return 0;}

#line 57 "requirement.g.d_parser.cc"
D_Reduction d_reduction_3_requirement = {3, 2, NULL, d_final_reduction_code_2_3_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 38 ".//requirement.g"
int d_final_reduction_code_2_4_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = new Coverage_Market::unit_or  ((D_PN(_children[0], _offset)->user).u,(D_PN(_children[2], _offset)->user).u);   return 0;}

#line 62 "requirement.g.d_parser.cc"
D_Reduction d_reduction_4_requirement = {3, 2, NULL, d_final_reduction_code_2_4_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 39 ".//requirement.g"
int d_final_reduction_code_2_5_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = new Coverage_Market::unit_then((D_PN(_children[0], _offset)->user).u,(D_PN(_children[2], _offset)->user).u);   return 0;}

#line 67 "requirement.g.d_parser.cc"
D_Reduction d_reduction_5_requirement = {3, 2, NULL, d_final_reduction_code_2_5_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 41 ".//requirement.g"
int d_final_reduction_code_3_6_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = cobj->req_rx_action(0,(D_PN(_children[0], _offset)->user).str->c_str()); delete (D_PN(_children[0], _offset)->user).str; (D_PN(_children[0], _offset)->user).str=NULL;   return 0;}

#line 72 "requirement.g.d_parser.cc"
D_Reduction d_reduction_6_requirement = {1, 3, NULL, d_final_reduction_code_3_6_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 42 ".//requirement.g"
int d_final_reduction_code_3_7_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).type='a'; (D_PN(_ps, _offset)->user).u = cobj->req_rx_action((D_PN(_ps, _offset)->user).type,(D_PN(_children[1], _offset)->user).str->c_str()); delete (D_PN(_children[0], _offset)->user).str; (D_PN(_children[0], _offset)->user).str=NULL;   return 0;}

#line 77 "requirement.g.d_parser.cc"
D_Reduction d_reduction_7_requirement = {2, 3, NULL, d_final_reduction_code_3_7_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 43 ".//requirement.g"
int d_final_reduction_code_3_8_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).type='e'; (D_PN(_ps, _offset)->user).u = cobj->req_rx_action((D_PN(_ps, _offset)->user).type,(D_PN(_children[1], _offset)->user).str->c_str()); delete (D_PN(_children[0], _offset)->user).str; (D_PN(_children[0], _offset)->user).str=NULL;   return 0;}

#line 82 "requirement.g.d_parser.cc"
D_Reduction d_reduction_8_requirement = {2, 3, NULL, d_final_reduction_code_3_8_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 44 ".//requirement.g"
int d_final_reduction_code_3_9_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = (D_PN(_children[1], _offset)->user).u;   return 0;}

#line 87 "requirement.g.d_parser.cc"
D_Reduction d_reduction_9_requirement = {3, 3, NULL, d_final_reduction_code_3_9_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 45 ".//requirement.g"
int d_final_reduction_code_3_10_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).u = new Coverage_Market::unit_not((D_PN(_children[1], _offset)->user).u);   return 0;}

#line 92 "requirement.g.d_parser.cc"
D_Reduction d_reduction_10_requirement = {2, 3, NULL, d_final_reduction_code_3_10_requirement, 0, 0, 0, 0, 0, 0, NULL};
#line 47 ".//requirement.g"
int d_final_reduction_code_4_11_requirement(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser) {  (D_PN(_ps, _offset)->user).str = new std::string((*(D_PN(_children[0], _offset))).start_loc.s+1,(*(D_PN(_children[0], _offset))).end-(*(D_PN(_children[0], _offset))).start_loc.s-2); (D_PN(_ps, _offset)->user).type=0;   return 0;}

#line 97 "requirement.g.d_parser.cc"
D_Reduction d_reduction_11_requirement = {1, 4, NULL, d_final_reduction_code_4_11_requirement, 0, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_0_requirement = {5, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_1_requirement = {6, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_2_requirement = {7, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_3_requirement = {8, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_4_requirement = {9, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_5_requirement = {10, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_6_requirement = {11, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_7_requirement = {12, 0, 0, 0, 0, 0, NULL};
D_Shift d_shift_8_requirement = {13, 0, 0, 0, 0, 0, NULL};

D_Shift * d_accepts_diff_0_0_requirement[] = {0};
D_Shift ** d_accepts_diff_0_requirement[] = {
d_accepts_diff_0_0_requirement
};

unsigned char d_scanner_0_0_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_accepts_diff_0_0_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_0_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_0_2_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_0_1_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
};

unsigned char d_scanner_0_1_1_requirement[SCANNER_BLOCK_SIZE] = {
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
};

unsigned char d_scanner_0_1_2_requirement[SCANNER_BLOCK_SIZE] = {
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
};

D_Shift * d_shift_0_2_requirement[] = {&d_shift_5_requirement,NULL};

D_Shift * d_shift_0_3_requirement[] = {&d_shift_3_requirement,NULL};

D_Shift * d_shift_0_4_requirement[] = {&d_shift_4_requirement,NULL};

unsigned char d_scanner_0_5_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_0_7_requirement[] = {&d_shift_8_requirement,NULL};

unsigned char d_scanner_0_8_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
};

unsigned char d_scanner_0_8_1_requirement[SCANNER_BLOCK_SIZE] = {
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
};

unsigned char d_scanner_0_9_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_0_11_requirement[] = {&d_shift_7_requirement,NULL};

D_Shift * d_accepts_diff_1_0_requirement[] = {0};
D_Shift ** d_accepts_diff_1_requirement[] = {
d_accepts_diff_1_0_requirement
};

unsigned char d_scanner_1_0_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_1_1_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
};

unsigned char d_scanner_1_1_1_requirement[SCANNER_BLOCK_SIZE] = {
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
};

unsigned char d_scanner_1_1_2_requirement[SCANNER_BLOCK_SIZE] = {
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
};

unsigned char d_scanner_1_4_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
};

unsigned char d_scanner_1_4_1_requirement[SCANNER_BLOCK_SIZE] = {
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
};

D_Shift * d_accepts_diff_8_0_requirement[] = {0};
D_Shift ** d_accepts_diff_8_requirement[] = {
d_accepts_diff_8_0_requirement
};

unsigned char d_scanner_8_0_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 
0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_8_1_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_8_2_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_8_3_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

unsigned char d_scanner_8_4_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_8_5_requirement[] = {&d_shift_1_requirement,NULL};

unsigned char d_scanner_8_6_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_8_7_requirement[] = {&d_shift_0_requirement,NULL};

unsigned char d_scanner_8_8_1_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_8_9_requirement[] = {&d_shift_2_requirement,NULL};

D_Shift * d_accepts_diff_12_0_requirement[] = {0};
D_Shift ** d_accepts_diff_12_requirement[] = {
d_accepts_diff_12_0_requirement
};

unsigned char d_scanner_12_0_0_requirement[SCANNER_BLOCK_SIZE] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

D_Shift * d_shift_12_1_requirement[] = {&d_shift_6_requirement,NULL};

SB_uint8 d_scanner_0_requirement[12] = {
{NULL, {d_scanner_0_0_0_requirement, d_scanner_0_0_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_1_0_requirement, d_scanner_0_1_1_requirement
 , d_scanner_0_1_2_requirement, d_scanner_0_1_2_requirement}},
{d_shift_0_2_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{d_shift_0_3_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{d_shift_0_4_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_0_5_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_1_0_requirement, d_scanner_0_1_1_requirement
 , d_scanner_0_1_2_requirement, d_scanner_0_1_2_requirement}},
{d_shift_0_7_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_8_0_requirement, d_scanner_0_8_1_requirement
 , d_scanner_0_8_1_requirement, d_scanner_0_8_1_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_0_9_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_1_0_requirement, d_scanner_0_1_1_requirement
 , d_scanner_0_1_2_requirement, d_scanner_0_1_2_requirement}},
{d_shift_0_11_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}}
};

SB_trans_uint8 d_transition_0_requirement[12] = {
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}}
};

SB_uint8 d_scanner_1_requirement[6] = {
{NULL, {d_scanner_1_0_0_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_1_1_0_requirement, d_scanner_1_1_1_requirement
 , d_scanner_1_1_2_requirement, d_scanner_1_1_2_requirement}},
{NULL, {d_scanner_1_1_0_requirement, d_scanner_1_1_1_requirement
 , d_scanner_1_1_2_requirement, d_scanner_1_1_2_requirement}},
{d_shift_0_7_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_1_4_0_requirement, d_scanner_1_4_1_requirement
 , d_scanner_1_4_1_requirement, d_scanner_1_4_1_requirement}},
{NULL, {d_scanner_1_1_0_requirement, d_scanner_1_1_1_requirement
 , d_scanner_1_1_2_requirement, d_scanner_1_1_2_requirement}}
};

SB_trans_uint8 d_transition_1_requirement[6] = {
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}}
};

SB_uint8 d_scanner_8_requirement[10] = {
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_0_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_1_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_2_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_3_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_4_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{d_shift_8_5_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_6_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{d_shift_8_7_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{NULL, {d_scanner_0_0_2_requirement, d_scanner_8_8_1_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{d_shift_8_9_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}}
};

SB_trans_uint8 d_transition_8_requirement[10] = {
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}}
};

SB_uint8 d_scanner_12_requirement[2] = {
{NULL, {d_scanner_12_0_0_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}},
{d_shift_12_1_requirement, {d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement
 , d_scanner_0_0_2_requirement, d_scanner_0_0_2_requirement}}
};

SB_trans_uint8 d_transition_12_requirement[2] = {
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}},
{{d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement
 , d_accepts_diff_0_0_0_requirement, d_accepts_diff_0_0_0_requirement}}
};

unsigned char d_goto_valid_0_requirement[] = {
0x1e,0x37};
unsigned char d_goto_valid_1_requirement[] = {
0x10,0x20};
unsigned char d_goto_valid_2_requirement[] = {
0x10,0x20};
unsigned char d_goto_valid_3_requirement[] = {
0x1c,0x37};
unsigned char d_goto_valid_4_requirement[] = {
0x18,0x37};
D_Reduction * d_reductions_5_requirement[] = {&d_reduction_11_requirement};
D_Reduction * d_reductions_7_requirement[] = {&d_reduction_1_requirement};
unsigned char d_goto_valid_8_requirement[] = {
0xe0,0x0};
D_Reduction * d_reductions_8_requirement[] = {&d_reduction_2_requirement};
D_Reduction * d_reductions_9_requirement[] = {&d_reduction_6_requirement};
D_Reduction * d_reductions_10_requirement[] = {&d_reduction_7_requirement};
D_Reduction * d_reductions_11_requirement[] = {&d_reduction_8_requirement};
unsigned char d_goto_valid_12_requirement[] = {
0x0,0x8};
D_Reduction * d_reductions_13_requirement[] = {&d_reduction_10_requirement};
unsigned char d_goto_valid_14_requirement[] = {
0x1c,0x37};
unsigned char d_goto_valid_15_requirement[] = {
0x1c,0x37};
unsigned char d_goto_valid_16_requirement[] = {
0x1c,0x37};
D_Reduction * d_reductions_17_requirement[] = {&d_reduction_9_requirement};
D_Reduction * d_reductions_18_requirement[] = {&d_reduction_3_requirement};
D_Reduction * d_reductions_19_requirement[] = {&d_reduction_4_requirement};
D_Reduction * d_reductions_20_requirement[] = {&d_reduction_5_requirement};
unsigned short d_gotos_requirement[74] = {
7,8,9,10,11,12,18,2,3,4,0,5,6,6,6,13,
9,10,15,16,17,2,3,4,0,5,6,14,10,0,0,0,
2,3,4,0,5,6,19,9,10,0,0,0,2,3,4,0,
5,6,20,9,10,0,0,0,2,3,4,0,5,6,21,9,
10,0,0,0,2,3,4,0,5,6};

D_ErrorRecoveryHint d_error_recovery_hints_0_requirement[] = {{0, 3, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_12_requirement[] = {{2, 3, ")"}};
D_ErrorRecoveryHint d_error_recovery_hints_17_requirement[] = {{3, 3, ")"}};

D_State d_states_requirement[] = {
{d_goto_valid_0_requirement, 1, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_requirement}, 1, NULL, (void*)d_scanner_0_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_requirement, d_accepts_diff_0_requirement, -1},
{d_goto_valid_1_requirement, 0, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_1_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_requirement, d_accepts_diff_1_requirement, -1},
{d_goto_valid_2_requirement, -1, {0, NULL}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_1_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_1_requirement, d_accepts_diff_1_requirement, -1},
{d_goto_valid_3_requirement, -13, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_requirement}, 1, NULL, (void*)d_scanner_0_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_requirement, d_accepts_diff_0_requirement, -1},
{d_goto_valid_4_requirement, -24, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_requirement}, 1, NULL, (void*)d_scanner_0_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_requirement, d_accepts_diff_0_requirement, -1},
{NULL, -2147483647, {1, d_reductions_5_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {0, NULL}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 1, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_7_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_8_requirement, -13, {1, d_reductions_8_requirement}, {0, NULL}, {0, NULL}, 1, NULL, (void*)d_scanner_8_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_8_requirement, d_accepts_diff_8_requirement, -1},
{NULL, -2147483647, {1, d_reductions_9_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_10_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_11_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_12_requirement, 5, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_12_requirement}, 1, NULL, (void*)d_scanner_12_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_12_requirement, d_accepts_diff_12_requirement, -1},
{NULL, -2147483647, {1, d_reductions_13_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{d_goto_valid_14_requirement, -36, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_requirement}, 1, NULL, (void*)d_scanner_0_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_requirement, d_accepts_diff_0_requirement, -1},
{d_goto_valid_15_requirement, -48, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_requirement}, 1, NULL, (void*)d_scanner_0_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_requirement, d_accepts_diff_0_requirement, -1},
{d_goto_valid_16_requirement, -60, {0, NULL}, {0, NULL}, {1, d_error_recovery_hints_0_requirement}, 1, NULL, (void*)d_scanner_0_requirement, sizeof(unsigned char) , 0, D_SCAN_ALL, (void*)d_transition_0_requirement, d_accepts_diff_0_requirement, -1},
{NULL, -2147483647, {1, d_reductions_17_requirement}, {0, NULL}, {1, d_error_recovery_hints_17_requirement}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_18_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_19_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1},
{NULL, -2147483647, {1, d_reductions_20_requirement}, {0, NULL}, {0, NULL}, 0, NULL, NULL, sizeof(unsigned char) , 0, D_SCAN_ALL, NULL, NULL, -1}
};

D_Symbol d_symbols_requirement[] = {
{D_SYMBOL_EBNF, "0 Start", 7, -1},
{D_SYMBOL_NTERM, "begin", 5, -1},
{D_SYMBOL_NTERM, "expr", 4, -1},
{D_SYMBOL_NTERM, "node", 4, -1},
{D_SYMBOL_NTERM, "actionname", 10, -1},
{D_SYMBOL_REGEX, "and", 3},
{D_SYMBOL_REGEX, "or", 2},
{D_SYMBOL_REGEX, "then", 4},
{D_SYMBOL_STRING, "a", 1},
{D_SYMBOL_STRING, "e", 1},
{D_SYMBOL_STRING, "(", 1},
{D_SYMBOL_STRING, ")", 1},
{D_SYMBOL_REGEX, "not", 3},
{D_SYMBOL_REGEX, "\\\"([^\\\"\\\\\\\\]|\\\\\\\\[^])*\\\"", 38},
};

D_ParserTables parser_tables_requirement = {
21, d_states_requirement, d_gotos_requirement, 0, 14, d_symbols_requirement, NULL, 0, NULL, 0};
