This example demonstrates how to test a JavaScript API.

The JavaScript module to be tested is in "mycounter.js".

We used the following recipe to create tests for it:

1. Create an html page that includes the API and fmbtweb.js. See
   "test.html".

2. Define test steps in AAL/Python. We did this in
   "mycountertest.aal".

3. Create a configuration file for the test. We did three of them:
   "smoketest.conf", "regressiontest.conf", "reliabilitytest.conf"

Then run the smoke test as follows:

$ fmbt -l smoketest.log smoketest.conf

the regression test as follows:

$ fmbt -l regressiontest.log regressiontest.conf

...and the reliability test as follows:

$ fmbt -l reliabilitytest.log reliabilitytest.conf

The JavaScript module contains an bug: reset() does not work if the
counter value is zero when reset() is called.

The smoke test may still pass, because detecting the bug requires
calling reset() when the internal value is zero. Thus it is easy to
run through every test step without finding the bug. The smoke test
stops when every test step has been executed at least once.

The regression test will fail, because it aims to cover all
permutations of any two actions. Therefore it will not stop until
<reset(), reset()> and <new mycounter(0), reset()> have been
tested. Both of these will set not-a-number to counter's value
attribute, which will cause verification of the "counter exists" tag
to fail.

The reliability test will fail, too. The test generator tries to cover
all permutations of any three actions.
