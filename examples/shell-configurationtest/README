This example demonstrates two things:

1. configuration testing using fMBT: how to test different
   configuration combinations

2. "offline" test generation: fMBT only generates the test, we take care of
   running the test steps outside the tool.


Configuration testing
---------------------

This example tests fMBT build options from two different source
distributions.

The test procedure is the following:

1) choose sources from which to build fmbt:
   - git tree or
   - source distribution .tar.gz

2) target to be built:
   - fmbt
   - debian package
   - rpm package
   - fmbt-droid for host
   - fmbt-droid for Android

After chosen target has been built and installed, it needs to be
tested by executing suitable tests. Test suite depend on the target:
   - fmbt, debian and rpm targets use the same test suite
   - fmbt-droid on host another, and
   - fmbt-droid on Android the third.

Once testing is finished, it's time for a clean-up and testing another
configuration starting from step 1.

This procedure is described in the test model (see test-configurations.sh).


Which combinations to test
--------------------------

We want to test all combinations: every target works, no matter from
which sources it's built. Therefore we define "perm:2" coverage in the
test configuration file: cover all possible combinations of any two
steps.

Because this test takes time to execute, we want to run shorter test
occasionally. That is:

- Test building from git and from .tar.gz at least once.

- Test building and testing every target at least once.

As it is not necessary to cover all combinations in this case, we can
use coverage = "perm:1" instead of "perm:2" in the test configuration
file. Nothing else needs to be changed.


Offline testing
---------------

Offline testing means that fMBT only generates tests. Instead of
actually executing a test step (like building fmbt), it does only a
"dry-run". This happens when the adapter is not given in the test
configuration file.
 
test-configurations.sh executes generated test by picking up the test
steps from the dry-run and executing them in Bash shell. See "Generate
and run the test" at the bottom of the test-configurations.sh.
