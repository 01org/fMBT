=================
aal fMBT tutorial
=================

In this tutorial we will show how to use aal to create mkdirrmdir 
adapter. 

Before we start
---------------

Read the tutorial first.

Creating the adapter
--------------------

$ lang -c -o libmymkdirrmdir.so /dev/stdin << EOF
model mymkdirrmdir {
  language: C++ {
#include <sys/stat.h>
#include <sys/types.h>
#include <helper.hh>
  } ;
//  default action type: input;

  variables {
    int x;
    std::string foo;
  }

  initial_state {
    x = 0;
    foo = "x";
  }
  
  action {
    name: "imkdir(dname)";

    adapter() {
      if (mkdir("/tmp/fmbt.mkrmdir",0777)!=0)
      	 return find(action_names,"imkdir(dname) exists");
      return find(action_names,"imkdir(dname)");
    }
  }

  action {
    name: "imkdir(dname) exists";
 
    adapter() {
      if (mkdir("/tmp/fmbt.mkrmdir",0777)!=0)
            return find(action_names,"imkdir(dname) exists");
      return find(action_names,"imkdir(dname)");
    }
  }

  action {
    name: "irmdir(dname)";
 
    adapter() {
      if (rmdir("/tmp/fmbt.mkrmdir")!=0)
      	 return find(action_names,"irmdir(dname) no");
    return find(action_names,"irmdir(dname)");
    }
  }

  action {
    name: "irmdir(dname) no";
 
    adapter() {
      if (rmdir("/tmp/fmbt.mkrmdir")!=0)
      	 return find(action_names,"irmdir(dname) no");
    return find(action_names,"irmdir(dname)");
    }
  }

  action {
    name: "irmdir(dname/d)";
 
    adapter() {
      if (rmdir("/tmp/fmbt.mkrmdir/d")!=0)
      	 return find(action_names,"irmdir(dname/d) no");
    return find(action_names,"irmdir(dname/d)");
    }
  }

  action {
    name: "irmdir(dname/d) no";
 
    adapter() {
      if (rmdir("/tmp/fmbt.mkrmdir/d")!=0)
      	 return find(action_names,"irmdir(dname/d) no");
    return find(action_names,"irmdir(dname/d)");
    }
  }

  action {
    name: "imkdir(dname/d)";
 
    adapter() {
      if (mkdir("/tmp/fmbt.mkrmdir/d",0777)!=0)
      	 return find(action_names,"imkdir(dname/d) exists");
      return find(action_names,"imkdir(dname/d)");
    }
  }

  action {
    name: "imkdir(dname/d) exists";

    adapter() {
      if (mkdir("/tmp/fmbt.mkrmdir/d",0777)!=0)
            return find(action_names,"imkdir(dname/d) exists");
      return find(action_names,"imkdir(dname/d)");
    }
  }
}
EOF

Creating the model
------------------

Our test model is the test model described in the tutorial, except 
action names have been changed. We could create the model with aal,
but thats an other story.

$ fmbt-gt -o mkrmdir.lsts -f - << EOF
P(init0, "gt:istate") ->

P(init0, "gt:istate")
T(init0, "init1",                                             init1)
T(init1, "init2",                                             start)

T(start, "imkdir(dname)",                                       dir)
T(start, "imkdir(dname) exists",                                dir)

P(dir,   "directory")
T(dir,   "imkdir(dname) exists",                                dir)
T(dir,   "irmdir(dname)",                                       nodir)

P(nodir, "no directory")
T(nodir, "imkdir(dname)",                                       dir)
T(nodir, "irmdir(dname) no",                                    nodir)
EOF

Writing test configuration file
-------------------------------

Create a test configuration file:

$ cat > mkrmdir_aal.conf << EOF
model        = "mkrmdir.lsts"
heuristic    = "greedy"
coverage     = "perm:1"
adapter      = "mapper:mlang.mrules"
engine.cov   = 1.0
engine.count = 100
EOF

Writing a mapper file
---------------------

Create a mapper file:

$ cat > mlang.mrules << EOF
1 = "dummy"
2 = "lib:mymkdirrmdir"

"(init.*)" -> (1, "\$1")
"(.*)"  -> (2, "\$1")
EOF

First we define two adapters. The fist one is dummy, which accepts
any input and will not produce any output. The second one is the 
one which is generated from our aal file.

Then we define the actual mapping. Every init action will be redirected
to the dummy adapter keeping the name. Every other action will be passed
to the mymkdirrmdir adapter keeping the name.

Running the test
----------------

Now we have the model and the configuration. We are ready to run the
test:

$ rm -f adapter.log mkrmdir_aal.log

$ fmbt -L mkrmdir_aal.log mkrmdir_aal.conf

