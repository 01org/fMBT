==========
AAL/Python
==========

This is AAL/Python reference documentation.

AAL is a pre/postcondition language for defining

1. test steps (how something is tested)

2. conditions for test steps (under which they can be tested).

In AAL/Python test steps and their conditions are written in Python.


AAL syntax
----------

Syntax of AAL is the following:

aal "<modelname>" {

    language "<language>" {
        [prelude]
    }

    variables {
        <declare variables for conditions and test steps>
    }

    initial_state {
        <define initial values for variables>
    }

    adapter_init {
        <executed after initial_state but before test
         if this AAL is used as an adapter in the test run>
    }

    adapter_exit {
        <executed when test run ends>
    }

    action "<name>" [, "<name>"...] {
        guard() {
            <precondition: return true when test step can be executed>
        }
        body() {
            <postcondition: change conditions after successful execution
             of this test step>
        }
        adapter() {
            <test step: code to be executed to carry out the test>
        }
    }...

    tag "<name>" {
        guard() {
            <precondition: return True to tag a state with this tag>
        }
        adapter() {
            <validate state: code to be executed on states with this tag>
        }
    }...
}

guard(), body() and adapter() blocks in actions and tags are
optional. The default guard() is always true, default body and adapter
blocks are empty.

If tag and action blocks are nested, the guard() of an inner block is
evaluated only if the guard() of the outer block returns true.

Names of actions must start with either

- "i" for input actions. Execution of these actions is triggered by
  the test generator.

- "o" for output actions. Execution of these actions is triggered by
  the system under test. Test engine cannot suggest executing these
  actions.

Shorthands "input" and "output" can be used instead of "action". In
this case names are automatically prefixed by "i:" and "o:",
respectively.

Comments in AAL are written after "#" on their own lines. Commenting
syntax inside code blocks is the same as in the programming language
in use.


Control flow
------------

The main loop in test generation and execution is:

0. Initialise: first the model, then the adapter.

1. Validate the current state (check every tag on this state).

2. Listen to output actions.
   If an output action is observed, execute it and go to step 1.

3. Choose and execute an enabled input action, then go to step 1.


Initialisation

When a compiled AAL module is loaded by fmbt or its remote
model/adapter like remote_pyaal, the prelude code (see the AAL syntax
above) is executed first. Once loaded, the module is initialised: if
the AAL module is used as a model in the test configuration, the
initial_state block is executed. If it is used as an adapter, the
adapter_init block is executed. If it is used as both, both blocks
will be executed in this order.


State validation

First, guard() blocks of all tags are evaluated to find which of them
are True in the current state. After that, adapter() blocks of those
tags are executed where guard() returned True.

If the adapter() block of a tag returns False or raises an
AssertionError, state validation has failed, and the test will fail
after all tags have been validated. If the adapter() block raises some
other Exception, the test will stop with an error. Otherwise,
validating the state in the perspective of the tag has succeeded.


Listening to outputs

First, adapter() blocks of all output actions are executed. If the
adapter() of an action returns False (or None), output was not
observed and nothing else is done to the action. If the adapter()
block of the action returns True, output corresponding to this action
was observed. The observation is validated by executing the guard() of
the action.

If the guard() returns True, observation is allowed in the current
state. The model is updated by executing the body() block of the
action. If the guard() returns False, the test will fail due to
observing the output in a state where it must not appear.

If the adapter() block raises an error, the test stops with an error.


Choosing and executing an enabled input action

In the simple case (no simulation), guard() blocks of all input
actions are executed. One of the actions whose guard() returned True
will be chosen.

Next, the adapter() of the chosen action is executed. If the adapter()
returns None or True, execution of this action is considered
successful. If the adapter() returns False or raises AssertionError,
test will fail due to unsuccessful execution of the action. If the
adapter() raises some other exception, the test will fail with an
error.

If execution was successful, the model is updated by executing the
body() block of the action.


Control flow in case of simulation

Test generator simulates test execution before choosing the next step
if test configuration defines heuristic lookhead(n) with n > 0. In
simulation the generator calls guard() blocks of all input actions,
then for each enabled action it:

1. Pushes the values of variables into a stack.

2. Simulates the execution of the action by updating the model as if
   the action has been successfully tested: by executing its body()
   block. This may change the values of variables.

3. Simulates executions of next n-1 steps similarly.

4. Pops the original values of variables from the stack.

Finally the algorithm chooses the next step, executes the adapter()
and, in case of success, the body() of the chosen action as in the
simple case.


Control flow when AAL is used only as a model

Choosing the next step takes place as in simple and simulation
cases. However, adapter() blocks are never executed. Instead, the name
of the chosen action is sent to configured adapter. In case of
successful execution, body() of the chosen test step is executed.


Control flow when AAL is used only as an adapter

guard() and body() blocks are never executed. Adapter() blocks are
executed in the order in which they have been chosen by the test
generator.


Control flow when the adapter() of an action returns a different action

In addition to True, None and False, the adapter() block of an action
is allowed to return an integer. The integer is the action that the
adapter reports to be executed - instead of the action whose adapter()
block was executed. This enables reacting to non-deterministic events.

If the adapter() returns an integer (an action), the body() of the
action returned (reported) action is executed, instead of body() of
the suggested action.


Control flow when the adapter() of an action raises an exception

If adapter_exception_hander() is not defined, this is an execution of
an unidentified action and test fails. If the handler is defined, it
is called. If it returns an action, that body() of that action is
executed. If it returns None, body() of suggested action is
executed. If it raises an exception, test fails with an execution of
an unidentified action.


End of test

adapter_exit is executed at the end of test. If the test ends because
of reaching an end condition, "verdict" and "reason" variables contain
more detailed information, for instance "pass" and "coverage
reached". Otherwise, "verdict" and "reason" are None.


AAL/Python syntax
-----------------

The code between "{" and "}" is Python except for in one
case. Variables block is a comma-separated list of names of
variables. Continued line should end with "\".

Example:

variables {
    system_state, \
    calculator_mode, \
    calendar_view, calendar_active_day
}


guard() must return True or False. Two examples:

action "iAlwaysDisabled" {
    guard() { return False }
}

action "iCalendar-NextDay" {
    guard() {
        if calendar_view == "year":
            return False
        else:
            return True
    }
}

As seen above, single-line Python statements can be written to the
same or separate lines as "{" and "}". In multiline blocks each
statement must be written to its own line. Indentation depth of the
first line in a block is not meaningful, but the rest of the lines
must be indented according to Python rules.


AAL/Python tools
----------------

remote_pyaal is an fMBT utility that enables using AAL/Python models
and adapters in test configuration. For instance, test configuration

model   = "aal_remote(remote_pyaal -l aal.log example.aal)"
adapter = "aal"

uses the same AAL/Python model/adapter instance as both model and
adapter.

Before loading the AAL/Python file, remote_pyaal uses fmbt-aalc to
compile AAL/Python into Python. By default, fmbt-aalc uses fmbt-aalp
for preprocessing the AAL/Python file.


AAL preprocessor
----------------

fmbt-aalp is the AAL preprocessor. It understands the following
directives:

^ifdef "<name>"
^ifndef "<name>"
^endif
^include "<filename>"

The directives must be used in the beginning of each line.


AAL compiler
------------

fmbt-aalc compiles the AAL/<language> code to <language>. Before
compilation it runs a preprocessor, that is fmbt-aalp by default.

For instance, AAL/Python model is compiled into Python library as
follows:

$ cat > example.aal << EOF
aal "example" {

    language "python" { import os }

    variables         { pid_printed }

    initial_state     { pid_printed = False }

    action "iPrintMyPID" {
        guard()       { return pid_printed == False }
        body() {
            log("my pid is: %s" % (os.getpid()))
            pid_printed = True
        }
    }
}
EOF

$ fmbt-aalc example.aal > example.py


remote_pyaal
------------

remote_pyaal implements remote AAL model/adapter interface. It loads a
model/adapter from AAL/Python source or pure Python produced by
fmbt-aalc.

remote_pyaal can convert AAL/Python models into finite state machines,
too. It outputs the state machine in LSTS (labelled state transition
system) format.


fmbt-editor
-----------

fMBT editor visualises AAL models as finite state machines. By
default, each visualised state corresponds to a unique combination of
values of variables, that are listed in AAL's variables block.

The scope and the output of the visualisation can be adjusted with the
following special comments understood by the editor.

# preview-hide-vars: <comma-separated-list-of-variables>

        Hide given variables. Each visualised state corresponds to a
        unique combination of values of *visible* variables. If two
        states differ by values of hidden variables only, the states
        will be equated in the visualisation.

# preview-show-vars: <comma-separated-list-of-variables>

        Hide all other variables but the ones that are listed here.

# preview-hide-trans: <regular expression>

        Hide all transitions where action matches to the regular
        expression.

# preview-hide-untested-trans: <regular expression>

        Hide all transitions where action matches to the regular
        expression and the transitions have not been executed in the
        generated test.

# preview-hide-states: [unvisited] [orphaned]

        unvisited: hide states that have not been visited in the test.

        orphaned: hide states where all incoming and outcoming
        transitions have been hidden because of
        preview-show-[tested-]trans or preview-hide-[untested-]trans.

# preview-show-trans: <regular expression>

        Show only transitions where action matches the regular
        expression.

# preview-show-tested-trans: <regular expression>

        Show only transitions where action matches the regular
        expression and the transitions have been executed in the
        generated test.

Other previewer options are:

# preview-image-path: <list of directories separated by colons>

        In order to show images on tooltips, look for them from
        directories listed in preview-image-path.


Special variables and functions in AAL/Python
---------------------------------------------

__file__ - string that contains the name of the AAL file.

action_name - string that contains the name of an action.

        Available: in guard(), body() and action() blocks of actions.

        Example: Actions "iLogin:Alice" and "iLogin:Bob" can be
        executed when "Alice" or "Bob" is not yet logged in.

        action "iLogin:Alice", "iLogin:Bob" {
            guard() {
                username = action_name.split(":")[1]
                return not username in logged_in
            }
            body() {
                username = action_name.split(":")[1]
                logged_in.add(username)
            }
        }

tag_name - string that contains the name of a tag.

        Available: in guard() and action() blocks of tags.

        Example: TODO


action(name) - function that returns corresponding action (integer)

        Available: TODO

        Example: TODO


adapter_exception_handler(action_name, exc) - hook adapter exceptions

        Available: N/A (defined by user)

        If defined, this function will be called in case adapter()
        block of any action raises an exception. Name of the action
        and the exception object are passed as arguments.

        If this function returns an integer, adapter reports execution
        of that action to test generator.

        If this function returns nothing, adapter reports execution of
        the action whose adapter() raised the exception.

        If this function raises an exception, adapter reports
        execution of an unidentified action (test will fail).

        Example: TODO

log(message) - function that writes messages to remote_pyaal's log

        Available: everywhere.
